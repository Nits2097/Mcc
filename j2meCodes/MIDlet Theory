MIDlet Theory

A MIDlet is an application that uses the Mobile Information Device Profile (MIDP) of the Connected Limited Device Configuration (CLDC) for the Java ME environment. Typical applications include games running on mobile devices and cell phones which have small graphical displays, simple numeric keypad interfaces and limited network access over HTTP.[1]

The .jad file describing a MIDlet suite is used to deploy the applications in one of two ways. Over the air (OTA) deployment involves uploading the .jad and .jar files to a Web server which is accessible by the device over HTTP. The user downloads the .jad file and installs the MIDlets they require.[2] Local deployment requires that the MIDlet files be transferred to the device over a non-network connection (such as through Bluetooth or IrDa, and may involve device-specific software).[3] Phones that support microSD cards can sometimes install .jar or .jad files that have been transferred to the memory card.

Initially, this class has the form:

import javax.microedition.midlet.*;
public class MidletHelloWorld extends MIDlet {
    public void startApp() {
    }
 
    public void pauseApp() {
    }
 
    public void destroyApp(boolean unconditional) {
    }
}
and it overrides some abstract methods:

startApp() – starter function of the application (entry point); it is the first function to be executed, after the MidletHelloWorld instance has been created;
pauseApp() – the function is executed at the occurrence of an event that involves blocking the MIDlet application; a common scenario in a mobile device application includes receiving a phone call during the execution of the application;
destroyApp() – function used to close the application; it is executed at the end of the application and contains routines used to release resources; acts like a destructor function;
The code sequence, from the above sample, is the smallest and simplest MIDlet program. This program does not has any visual effects because it was finished immediately after it is launched in execution.

If we think to an application written in C, the MIDlet MidletHelloWorld, in current form, is equivalent to

void main ()
{
}
The three methods are required by the MidletHelloWorld class, because it is a a situation generated by derivation from a MIDlet abstract class. They manage possible states in which the application may be. This concept is also seen in other Java applications, like applets.

To post a message on the screen, the application must have access to the graphics resources controller’s. This is done by defining a Display object which is initialized at the start of the application.

public class MidletHelloWorld extends MIDlet {
    //reference to the application display manager
    private Display display = null;
    public void startApp() {
        if(display==null)
            display = Display.getDisplay(this);
    }
 
    public void pauseApp() {
    }
 
    public void destroyApp(boolean unconditional) {
    }
}
Because the hardware and software characteristics of mobile device impose restrictions on Java Mobile Applications (things are totally different from Java applications for PC), we can only develop applications that display information within a single form (or window) at a time.

Moreover, because the screen is small, this form covers all the device’s display. To manage the visual resources and to establish what form is active we will use the Display reference.

To display the on-screen text Hello World! we need a form and a container for that string. Thus we use a TextBox type form (this is NOT the TextBox control from other programming languages) which is a form containing only one dialog box control with a default Multiline property (text is displayed by default on multiple lines). The reason for the existence of this type of visual resource is given also by the limited resources we have on a mobile device. Other forms types allow more complex applications, but they will be described in another post.

By adding the TextBox form,the code becomes:

import javax.microedition.lcdui.*;
import javax.microedition.midlet.*;
 
public class MidletHelloWorld extends MIDlet {
    //reference to the application display manager
    private Display display = null;
 
    //TextBox use to print the Hello Word message
    private TextBox tbMainForm;
 
    public MidletHelloWorld(){
      tbMainForm = new TextBox("My First MIDlet","Hello World !",100,0);
    }
 
    public void startApp() {
        if(display==null)
            display = Display.getDisplay(this);
	//activate the form
        display.setCurrent(tbMainForm);
    }
 
    public void pauseApp() {
    }
 
    public void destroyApp(boolean unconditional) {
    }
}
In the previous code sequence, you may notice that the form display was realized in the startApp method via the setCurrent function of the Display object.

Compiling and running the code we will obtain the next image in the emulator:

At the emulator start, it does not immediately execute the application. To start it you must select the Launch button (bottom right of the emulator).


Limited Connected Device User Interface (LCDUI) is a base application programming interface (API) for graphical user interfaces (GUIs) created using Java Micro Edition (ME). The LCDUI package contains classes and interfaces used in constructing Mobile Information Device Profile (MIDP) applications.


MIDlet lifecycle
The AMS (application management software) handles the MIDlets phases:

Discovery: this phase is a stage before the actual installation of the MIDlet. In this phase, we select through the AMS which application we want to download.
Installation: in this phase once the MIDlet is downloaded the AMS starts the installation and provides the user with information about the progress of the MIDlet installation including any error message.
Execution: in this phase the AMS is in charge of managing the states of the MIDlet.
Update: in this phase the AMS is capable to detect and inform if there is an update available for an already installed MIDlet. Once it detects an update, it should inform the user whether to update the application or not.
Deleted: in this phase the AMS is in charge of deleting the MIDlet from the device. It will ask for confirmation from the user before deleting the MIDlet.
There are 3 states in the lifecycle of a MIDlet

Active
Paused
Destroyed
When the application is loaded, it starts in a Paused state, when the application starts its execution it is transitioned to Active state. When exiting the application, it will transition to a Destroyed state. In this state, all resources are de-allocated.
 CHECK PICTURE OF MIDLET LIFECYCLE

 All J2ME applications—MIDlets and others—are real Java applications that run under the control of a Java VM. But what controls the Java VM, for instance on a mobile phone? There's no command shell from which you can invoke your favorite Java applications like you do on your workstation. Starting, stopping, and managing the execution of J2ME applications is controlled by application management software (AMS) that resides on the device. In fact, the AMS controls the entire application lifecycle, from installation, upgrade and version management, to removal of application software.